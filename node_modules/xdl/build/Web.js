'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasWebSupportAsync = exports.openProjectAsync = undefined;

let openProjectAsync = exports.openProjectAsync = (() => {
  var _ref = _asyncToGenerator(function* (projectRoot, options) {
    const hasWebSupport = yield hasWebSupportAsync(projectRoot);
    if (!hasWebSupport) {
      logWebSetup();
      return { success: false };
    }
    try {
      let url = yield (_UrlUtils || _load_UrlUtils()).constructWebAppUrlAsync(projectRoot, options);
      (0, (_opn || _load_opn()).default)(url, { wait: false });
      return { success: true, url };
    } catch (e) {
      (_Logger || _load_Logger()).default.global.error(`Couldn't start project on web: ${e.message}`);
      return { success: false, error: e };
    }
  });

  return function openProjectAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

let hasWebSupportAsync = exports.hasWebSupportAsync = (() => {
  var _ref2 = _asyncToGenerator(function* (projectRoot) {
    const { exp } = yield (0, (_ProjectUtils || _load_ProjectUtils()).readConfigJsonAsync)(projectRoot);
    const isWebConfigured = exp.platforms.includes('web');
    return isWebConfigured;
  });

  return function hasWebSupportAsync(_x3) {
    return _ref2.apply(this, arguments);
  };
})();

exports.logWebSetup = logWebSetup;

var _opn;

function _load_opn() {
  return _opn = _interopRequireDefault(require('opn'));
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _Logger;

function _load_Logger() {
  return _Logger = _interopRequireDefault(require('./Logger'));
}

var _UrlUtils;

function _load_UrlUtils() {
  return _UrlUtils = _interopRequireWildcard(require('./UrlUtils'));
}

var _ProjectUtils;

function _load_ProjectUtils() {
  return _ProjectUtils = require('./project/ProjectUtils');
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function logWebSetup() {
  (_Logger || _load_Logger()).default.global.error(getWebSetupLogs());
}

function getWebSetupLogs() {
  const appJsonRules = (_chalk || _load_chalk()).default.white(`
  ${(_chalk || _load_chalk()).default.whiteBright.bold(`app.json`)}
  {
    "platforms": [
      "android",
      "ios",
  ${(_chalk || _load_chalk()).default.green.bold(`+      "web"`)}
    ]
  }`);
  const packageJsonRules = (_chalk || _load_chalk()).default.white(`
  ${(_chalk || _load_chalk()).default.whiteBright.bold(`package.json`)}
  {
    "dependencies": {
  ${(_chalk || _load_chalk()).default.green.bold(`+      "react-native-web": "^0.11.0",`)}
  ${(_chalk || _load_chalk()).default.green.bold(`+      "react-art": "^16.7.0",`)}
  ${(_chalk || _load_chalk()).default.green.bold(`+      "react-dom": "^16.7.0"`)}
    },
    "devDependencies": {
  ${(_chalk || _load_chalk()).default.green.bold(`+      "babel-preset-expo": "^5.0.0"`)}
    }
  }`);
  return `${(_chalk || _load_chalk()).default.red.bold('Your project is not configured to support web yet!')}
  ${packageJsonRules}
    ${appJsonRules}`;
}
//# sourceMappingURL=__sourcemaps__/Web.js.map
